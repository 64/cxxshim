#ifndef _CXXSHIM_ALGORITHM
#define _CXXSHIM_ALGORITHM

namespace std {

template<typename T>
const T &min(const T &a, const T &b) {
	return (b < a) ? b : a;
}

template<typename T>
const T &max(const T &a, const T &b) {
	return (a < b) ? b : a;
}

template<typename It, typename T>
It find(It begin, It end, const T &value) {
	for(auto it = begin; it != end; ++it)
		if(*it == value)
			return it;
	return end;
}

template<typename It, typename Pred>
It find_if(It begin, It end, Pred p) {
	for(auto it = begin; it != end; ++it)
		if(p(*it))
			return it;
	return end;
}

template<typename InIt, typename OutIt>
OutIt copy(InIt begin, InIt end, OutIt d_first) {
	while (begin != end)
	    *d_first++ = *begin++;
	return d_first;
}

} // namespace std

#endif // _CXXSHIM_ALGORITHM
