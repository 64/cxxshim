#ifndef _CXXSHIM_TYPE_TRAITS
#define _CXXSHIM_TYPE_TRAITS

#ifdef CXXSHIM_INTEGRATE_GCC

#include_next <type_traits>

#else // CXXSHIM_INTEGRATE_GCC

namespace std {

template<class T, T v>
struct integral_constant {
	static constexpr T value = v;
	using value_type = T;
	using type = integral_constant;

	constexpr operator value_type() const noexcept {
		return value;
	}

	constexpr value_type operator()() const noexcept {
		return value;
	}
};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

#define _DEFINE_SPEC0(_Name, _Type, _Value) \
	template<> \
	struct _Name<_Type> \
	: public integral_constant<bool, _Value> { }

// TODO: add remove_cv support to this
template<typename T>
struct is_integral : public false_type { };

_DEFINE_SPEC0(is_integral, bool, true);
_DEFINE_SPEC0(is_integral, char, true);
_DEFINE_SPEC0(is_integral, signed char, true);
_DEFINE_SPEC0(is_integral, unsigned char, true);
_DEFINE_SPEC0(is_integral, short, true);
_DEFINE_SPEC0(is_integral, unsigned short, true);
_DEFINE_SPEC0(is_integral, int, true);
_DEFINE_SPEC0(is_integral, unsigned int, true);
_DEFINE_SPEC0(is_integral, long, true);
_DEFINE_SPEC0(is_integral, unsigned long, true);
_DEFINE_SPEC0(is_integral, long long, true);
_DEFINE_SPEC0(is_integral, unsigned long long, true);

template<typename T>
struct is_floating_point : public false_type { };

_DEFINE_SPEC0(is_floating_point, float, true);
_DEFINE_SPEC0(is_floating_point, double, true);
_DEFINE_SPEC0(is_floating_point, long double, true);

#undef _DEFINE_SPEC0

template<typename T>
struct is_arithmetic : public integral_constant<bool, is_integral<T>::value ||
				is_floating_point<T>::value> { };

namespace detail {

template<typename T, bool = is_arithmetic<T>::value>
struct is_unsigned : public integral_constant<bool, T(0) < T(-1)> { };

template<typename T>
struct is_unsigned<T, false> : public false_type { };

template<typename T, bool = is_arithmetic<T>::value>
struct is_signed : public integral_constant<bool, T(-1) < T(0)> { };

template<typename T>
struct is_signed<T, false> : public false_type { };

template<typename T>
struct type_identity { using type = T; };

template<typename T>
auto try_add_lvalue_reference(int) -> type_identity<T&>;
template<typename T>
auto try_add_lvalue_reference(...) -> type_identity<T>;

template<typename T>
auto try_add_rvalue_reference(int) -> type_identity<T&&>;
template<typename T>
auto try_add_rvalue_reference(...) -> type_identity<T>;

} // namespace detail

template<typename T>
struct add_lvalue_reference : decltype(detail::try_add_lvalue_reference<T>(0)) {};
template<typename T>
using add_lvalue_reference_t = typename add_lvalue_reference<T>::type;

template<typename T>
struct add_rvalue_reference : decltype(detail::try_add_rvalue_reference<T>(0)) {};
template<typename T>
using add_rvalue_reference_t = typename add_rvalue_reference<T>::type;

template<typename T>
struct add_const
{ using type = const T; };

template<typename T>
struct is_unsigned : public detail::is_unsigned<T>::type { };

template<typename T>
struct is_signed : public detail::is_signed<T>::type { };

template<class T, class U>
struct is_same : false_type {};

template<class T>
struct is_same<T, T> : true_type {};

template<class T>
struct is_void : is_same<T, void> {};

template<typename T>
add_rvalue_reference_t<T> declval();

template<typename T>
struct remove_reference {
	typedef T type;
};

template<typename T>
struct remove_reference<T &> {
	typedef T type;
};

template<typename T>
struct remove_reference<T &&> {
	typedef T type;
};

template<typename T>
using remove_reference_t = typename remove_reference<T>::type;

namespace _void_impl {
	template<typename... T>
	struct helper {
		using type = void;
	};
};

template<typename... T>
using void_t = typename _void_impl::helper<T...>::type;

template<typename T>
struct add_pointer {
	using type = T *;
};

template<typename T>
using add_pointer_t = typename add_pointer<T>::type;

namespace _result_of_impl {
	template<typename S, typename = void>
	struct helper { };

	template<typename F, typename... Args>
	struct helper<F(Args...), void_t<decltype(declval<F>() (declval<Args>()...))>> {
		using type = decltype(declval<F>() (declval<Args>()...));
	};
};

template<typename T>
using result_of_t = typename _result_of_impl::helper<T>::type;

template<class F, class... ArgTypes>
struct invoke_result {
	using type = _result_of_impl::helper<F, ArgTypes...>::type;
};

template<class F, class... ArgTypes>
using invoke_result_t = invoke_result<F, ArgTypes...>::type;

template<bool B, class T = void>
struct enable_if {};

template<class T>
struct enable_if<true, T> { typedef T type; };

template<bool B, class T = void>
using enable_if_t = typename enable_if<B, T>::type;

template<class T, class... Args>
struct is_constructible
{ static constexpr bool value =  __is_constructible(T, Args...); };

template<class T, class... Args>
struct is_trivially_constructible
{ static constexpr bool value = __is_trivially_constructible(T, Args...); };

namespace _is_destructible_impl {
	struct do_is_destructible_impl {
		template<typename T, typename = decltype(declval<T&>().~_T())>
		static true_type __test(int);

		template<typename>
		static false_type __test(...);
	};

	template<class T>
	struct is_destructible_impl : do_is_destructible_impl {
		using type = decltype(__test<T>(0));
	};
} // namespace _is_destructible_impl

template<class T>
struct is_destructible : _is_destructible_impl::is_destructible_impl<T>::type {};

template<class T>
struct is_trivially_destructible
{ static constexpr bool value = __has_trivial_destructor(T); };

template<class T, class... Args>
inline constexpr bool is_constructible_v = is_constructible<T, Args...>::value;

template<class T, class... Args>
inline constexpr bool is_trivially_constructible_v = is_trivially_constructible<T, Args...>::value;

template<class T>
inline constexpr bool is_destructible_v = is_destructible<T>::value;

template<class T>
inline constexpr bool is_trivially_destructible_v = is_trivially_destructible<T>::value;

template<class T>
struct is_trivially_copy_constructible :
	is_trivially_constructible<T, typename add_lvalue_reference<
	typename add_const<T>::type>::type> {};

template<class T>
inline constexpr bool is_trivially_copy_constructible_v = is_trivially_copy_constructible<T>::value;

template<class T>
struct is_trivially_move_constructible :
	is_trivially_constructible<T, typename add_rvalue_reference<T>::type> {};

template<class T>
inline constexpr bool is_trivially_move_constructible_v = is_trivially_move_constructible<T>::value;

template<class T>
struct is_default_constructible : is_constructible<T> {};

template<class T>
inline constexpr bool is_default_constructible_v = is_default_constructible<T>::value;

template<class T, class U>
struct is_trivially_assignable
{ static constexpr bool value = __is_trivially_assignable(T, U); };

template<class T>
struct is_trivially_move_assignable : is_trivially_assignable<
	typename add_lvalue_reference<T>::type,
	typename add_rvalue_reference<T>::type> {};

template<class T>
struct is_trivially_copy_assignable : is_trivially_assignable<
	typename add_lvalue_reference<T>::type,
	typename add_lvalue_reference<const T>::type> {};

template<class T, class U>
inline constexpr bool is_trivially_assignable_v = is_trivially_assignable<T, U>::value;

template <class T>
inline constexpr bool is_trivially_move_assignable_v = is_trivially_move_assignable<T>::value;

template <class T>
inline constexpr bool is_trivially_copy_assignable_v = is_trivially_copy_assignable<T>::value;

namespace detail {

	template<class>
	using true_type_for = true_type;

	template<class T>
	auto test_returnable(int) -> true_type_for<T()>;
	template<class T>
	auto test_returnable(...) -> false_type;

	template<class From, class To>
	auto test_nonvoid_convertible(int) -> true_type_for<
		decltype(declval<void(&)(To)>()(declval<From>()))>;

	template<class From, class To>
	auto test_nonvoid_convertible(...) -> false_type;
} // namespace detail

template<class From, class To>
struct is_convertible : integral_constant<bool,
	(decltype(detail::test_returnable<To>(0))::value &&
	decltype(detail::test_nonvoid_convertible<From, To>(0))::value) ||
	(is_void<From>::value && is_void<To>::value)> {};

template<class From, class To>
inline constexpr bool is_convertible_v = is_convertible<From, To>::value;

} // namespace std

#endif // !defined(CXXSHIM_INTEGRATE_GCC)

#endif // _CXXSHIM_TYPE_TRAITS
